(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', 'react', 'prop-types', 'classcat', './Styles'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('react'), require('prop-types'), require('classcat'), require('./Styles'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react, global.propTypes, global.classcat, global.Styles);
    global.index = mod.exports;
  }
})(this, function (exports, _react, _propTypes, _classcat, _Styles) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.StyledShadow = exports.StyledText = exports.StyledShadowText = undefined;

  var _react2 = _interopRequireDefault(_react);

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _classcat2 = _interopRequireDefault(_classcat);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  function _objectWithoutProperties(obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  exports.StyledShadowText = _Styles.StyledShadowText;
  exports.StyledText = _Styles.StyledText;
  exports.StyledShadow = _Styles.StyledShadow;

  var ShadowText = function (_Component) {
    _inherits(ShadowText, _Component);

    function ShadowText() {
      _classCallCheck(this, ShadowText);

      return _possibleConstructorReturn(this, (ShadowText.__proto__ || Object.getPrototypeOf(ShadowText)).apply(this, arguments));
    }

    _createClass(ShadowText, [{
      key: 'render',
      value: function render() {
        var _props = this.props,
            anchorShadow = _props.anchorShadow,
            blurShadow = _props.blurShadow,
            className = _props.className,
            children = _props.children,
            theme = _props.theme,
            otherProps = _objectWithoutProperties(_props, ['anchorShadow', 'blurShadow', 'className', 'children', 'theme']);

        var classNames = (0, _classcat2.default)(['ShadowText', {
          ShadowText: {
            '--anchoredShadow': anchorShadow,
            '--blurredShadow': blurShadow
          }
        }, className]);

        return _react2.default.createElement(
          _Styles.StyledShadowText,
          _extends({ className: classNames, anchorShadow: anchorShadow, blurShadow: blurShadow }, otherProps, { theme: theme }),
          _react2.default.createElement(
            _Styles.StyledText,
            { className: 'ShadowText__Text', anchorShadow: anchorShadow, theme: theme },
            children
          ),
          _react2.default.createElement(
            _Styles.StyledShadow,
            { className: 'ShadowText__Shadow', blurShadow: blurShadow, anchorShadow: anchorShadow, theme: theme },
            children
          )
        );
      }
    }]);

    return ShadowText;
  }(_react.Component);

  ShadowText.propTypes = {
    /** Whether to anchor the text shadow to the page or not **/
    anchorShadow: _propTypes2.default.bool,
    /** Whether to blur the text shadow or not **/
    blurShadow: _propTypes2.default.bool,
    /** An optional additional classname to give the component **/
    className: _propTypes2.default.string,
    /** Children - should be text only **/
    children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node]),
    /** optional theme overrides **/
    theme: _propTypes2.default.shape({
      shadowTextColor: _propTypes2.default.string,
      shadowTextShadowColor: _propTypes2.default.string,
      shadowTextShadowBlur: _propTypes2.default.string,
      shadowTextXTranslate: _propTypes2.default.string,
      shadowTextYTranslate: _propTypes2.default.string,
      shadowTextZIndex: _propTypes2.default.oneOf(_propTypes2.default.string, _propTypes2.default.number),
      shadowTextTransitionDuration: _propTypes2.default.string,
      shadowTextTransitionTiming: _propTypes2.default.string
    })
  };
  ShadowText.defaultProps = {
    anchorShadow: false,
    blurShadow: true,
    className: null,
    children: null,
    theme: null
  };
  exports.default = ShadowText;
});