{"ast":null,"code":"var _jsxFileName = \"/Users/chambersv/Documents/AllCampfire/campfirelanding/src/components/MapTest3.js\";\nimport React from \"react\";\nimport { geoCentroid } from \"d3-geo\";\nimport { ComposableMap, Geographies, Geography, Marker, Annotation } from \"react-simple-maps\";\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport { Container } from '@material-ui/core';\nimport allStates from \"./allstates.json\";\nimport schools from \"../static/schoolsOnboard.json\";\nconst InteractiveMarker = withStyles(theme => ({\n  style: {},\n  '&:hover': {\n    backgroundColor: '#000',\n    color: '#fff'\n  }\n}))(Marker);\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\nconst offsets = {\n  VT: [50, -8],\n  NH: [34, 2],\n  MA: [30, -1],\n  RI: [28, 2],\n  CT: [35, 10],\n  NJ: [34, 1],\n  DE: [33, 0],\n  MD: [47, 10],\n  DC: [49, 21]\n};\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  map: {\n    //justifyContent: 'center', \n    //alignItems: 'center', \n    backgroundImage: `url(${process.env.PUBLIC_URL + \"/assets/mapBackground.png\"})`,\n    backgroundColor: 'rgba(255,255,255,0.6)',\n    backgroundBlendMode: 'lighten',\n    // changes opacity of background image. \n    backgroundRepeat: 'no-repeat',\n    //backgroundSize: '840px',\n    backgroundPosition: 'center',\n    backgroundSize: '90%'\n  },\n  marker: {\n    '&:hover': {\n      fill: '#000'\n    }\n  }\n}));\n\nconst MapChart = () => {\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.map,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ComposableMap, {\n    projection: \"geoAlbersUsa\",\n    width: \"1000\",\n    style: {\n      strokeWidth: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Geographies, {\n    geography: geoUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, ({\n    geographies\n  }) => /*#__PURE__*/React.createElement(React.Fragment, null, geographies.map(geo => /*#__PURE__*/React.createElement(Geography, {\n    key: geo.rsmKey,\n    stroke: \"#000\",\n    geography: geo,\n    fill: \"transparent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  })))), schools.map(school => /*#__PURE__*/React.createElement(Marker, {\n    coordinates: [school[\"lon\"], school[\"lat\"]],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"circle\", {\n    className: classes.marker,\n    r: 8,\n    fill: \"#fc6060\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 21\n    }\n  }))))));\n};\n\nexport default MapChart;","map":{"version":3,"sources":["/Users/chambersv/Documents/AllCampfire/campfirelanding/src/components/MapTest3.js"],"names":["React","geoCentroid","ComposableMap","Geographies","Geography","Marker","Annotation","makeStyles","withStyles","Container","allStates","schools","InteractiveMarker","theme","style","backgroundColor","color","geoUrl","offsets","VT","NH","MA","RI","CT","NJ","DE","MD","DC","useStyles","root","map","backgroundImage","process","env","PUBLIC_URL","backgroundBlendMode","backgroundRepeat","backgroundPosition","backgroundSize","marker","fill","MapChart","classes","strokeWidth","geographies","geo","rsmKey","school"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { geoCentroid } from \"d3-geo\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n  Annotation\n} from \"react-simple-maps\";\nimport { makeStyles, withStyles } from '@material-ui/core/styles'; \nimport {Container } from '@material-ui/core'\n\nimport allStates from \"./allstates.json\";\nimport schools from \"../static/schoolsOnboard.json\";\n\nconst InteractiveMarker = withStyles((theme) => ({\n    style: {\n\n    },\n    '&:hover': {\n        backgroundColor: '#000',\n        color: '#fff', \n      },\n\n}))(Marker); \n\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n\nconst offsets = {\n  VT: [50, -8],\n  NH: [34, 2],\n  MA: [30, -1],\n  RI: [28, 2],\n  CT: [35, 10],\n  NJ: [34, 1],\n  DE: [33, 0],\n  MD: [47, 10],\n  DC: [49, 21]\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n    },\n    map: {\n        //justifyContent: 'center', \n        //alignItems: 'center', \n        backgroundImage: `url(${process.env.PUBLIC_URL + \"/assets/mapBackground.png\"})`,\n        backgroundColor: 'rgba(255,255,255,0.6)', \n        backgroundBlendMode: 'lighten', // changes opacity of background image. \n        backgroundRepeat: 'no-repeat',\n        //backgroundSize: '840px',\n        backgroundPosition: 'center',\n        backgroundSize: '90%',\n    },\n    marker: {\n        '&:hover': {\n            fill: '#000'\n          },\n    },\n}))\n\nconst MapChart = () => {\n    const classes = useStyles(); \n\n\n  return (\n      <div className={classes.root}>\n        <div className={classes.map}>\n            <ComposableMap projection=\"geoAlbersUsa\"\n                width='1000'\n                style={{strokeWidth: 2,}}\n            > \n            <Geographies geography={geoUrl}>\n                {({ geographies }) => (\n                <>\n                    {geographies.map(geo => (\n                    <Geography\n                        key={geo.rsmKey}\n                        stroke=\"#000\"\n                        geography={geo}\n                        fill=\"transparent\"\n                        \n                    />\n                    ))}\n                    {/* \n                    {geographies.map(geo => {\n                    const centroid = geoCentroid(geo);\n                    const cur = allStates.find(s => s.val === geo.id);\n                    return (\n                        <g key={geo.rsmKey + \"-name\"}>\n                        </g>\n                    );\n                    })}\n                    */}\n                </>\n                )}\n            </Geographies>\n\n            {/* coordinate system is [lon, lat] (order of d3-geo */}\n            {schools.map(school => (\n                <Marker coordinates={[school[\"lon\"], school[\"lat\"]]}>\n                    <circle className={classes.marker} r={8} fill=\"#fc6060\" />\n                </Marker>\n            ))}\n            \n            </ComposableMap>\n        </div>\n    </div>\n  );\n};\n\nexport default MapChart;\n"]},"metadata":{},"sourceType":"module"}